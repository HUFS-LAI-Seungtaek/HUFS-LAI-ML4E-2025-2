{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "8c96a48f",
      "metadata": {
        "id": "8c96a48f"
      },
      "source": [
        "# MNIST 손글씨 숫자 분류 튜토리얼\n",
        "\n",
        "이 노트북에서는 PyTorch를 사용하여 MNIST 데이터셋의 손글씨 숫자를 분류하는 간단한 Multi-Layer Perceptron (MLP) 모델을 구현합니다.\n",
        "\n",
        "## 학습 목표\n",
        "1. PyTorch를 이용한 기본적인 신경망 구현\n",
        "2. 데이터 로딩 및 전처리 과정 이해\n",
        "3. 모델 훈련 및 평가 과정 체험\n",
        "4. 예측 결과 시각화 및 분석\n",
        "\n",
        "## 데이터셋 정보\n",
        "- **MNIST**: 28x28 픽셀의 흑백 손글씨 숫자 이미지 (0-9)\n",
        "- **훈련 데이터**: 60,000개\n",
        "- **테스트 데이터**: 10,000개"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4uzj97p1jfe",
      "metadata": {
        "id": "4uzj97p1jfe"
      },
      "source": [
        "## 1. 라이브러리 임포트\n",
        "\n",
        "먼저 필요한 라이브러리들을 임포트합니다:\n",
        "\n",
        "- **torch**: PyTorch의 핵심 라이브러리\n",
        "- **torch.nn**: 신경망 레이어와 손실함수\n",
        "- **torch.optim**: 최적화 알고리즘 (Adam, SGD 등)\n",
        "- **torchvision.transforms**: 이미지 전처리\n",
        "- **datasets**: HuggingFace 데이터셋 라이브러리\n",
        "- **matplotlib**: 시각화\n",
        "- **numpy**: 수치 계산"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "3z7x9hct66v",
      "metadata": {
        "id": "3z7x9hct66v",
        "outputId": "cb1a3572-5a4f-43a0-b018-8c129d3783c2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyTorch version: 2.8.0+cu126\n",
            "CUDA available: False\n",
            "Using CPU\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import DataLoader\n",
        "from torchvision import transforms\n",
        "from datasets import load_dataset\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "print(f\"PyTorch version: {torch.__version__}\")\n",
        "print(f\"CUDA available: {torch.cuda.is_available()}\")\n",
        "if torch.cuda.is_available():\n",
        "    print(f\"GPU: {torch.cuda.get_device_name(0)}\")\n",
        "else:\n",
        "    print(\"Using CPU\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ijq7kclsqrq",
      "metadata": {
        "id": "ijq7kclsqrq"
      },
      "source": [
        "## 2. MLP (Multi-Layer Perceptron) 모델 정의\n",
        "\n",
        "간단한 3층 신경망을 구현합니다:\n",
        "\n",
        "1. **입력층**: 784개 뉴런 (28×28 픽셀을 1차원으로 펼침)\n",
        "2. **은닉층**: 100개 뉴런 + ReLU 활성화 함수\n",
        "3. **출력층**: 10개 뉴런 (0-9 클래스)\n",
        "\n",
        "### 주요 개념:\n",
        "- **nn.Linear**: Fully Connected Layer (혹은 Dense Layer)\n",
        "- **nn.ReLU**: ReLU 활성화 함수 (음수는 0, 양수는 그대로)\n",
        "- **nn.Sequential**: 레이어들을 순차적으로 연결"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "grc170711o7",
      "metadata": {
        "id": "grc170711o7",
        "outputId": "d13114aa-eece-4b68-f73e-26f7637e7e32",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "모델 구조:\n",
            "MLP(\n",
            "  (layers): Sequential(\n",
            "    (0): Linear(in_features=784, out_features=500, bias=True)\n",
            "    (1): ReLU()\n",
            "    (2): Linear(in_features=500, out_features=10, bias=True)\n",
            "  )\n",
            ")\n",
            "\n",
            "총 파라미터 수: 397,510\n",
            "학습 가능한 파라미터 수: 397,510\n",
            "\n",
            "레이어별 파라미터:\n",
            "layers.0.weight: torch.Size([500, 784]) (392,000 개)\n",
            "layers.0.bias: torch.Size([500]) (500 개)\n",
            "layers.2.weight: torch.Size([10, 500]) (5,000 개)\n",
            "layers.2.bias: torch.Size([10]) (10 개)\n"
          ]
        }
      ],
      "source": [
        "class MLP(nn.Module):\n",
        "    def __init__(self, input_size=784, hidden_size=500, num_classes=10):\n",
        "        super(MLP, self).__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Linear(input_size, hidden_size),  # 784 -> 100\n",
        "            nn.ReLU(),                          # 활성화 함수\n",
        "            nn.Linear(hidden_size, num_classes) # 100 -> 10\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        \"\"\"\n",
        "        순전파 함수 // forward propagation\n",
        "        x: 입력 텐서 (batch_size, 784)\n",
        "        return: 출력 텐서 (batch_size, 10)\n",
        "        \"\"\"\n",
        "        return self.layers(x)\n",
        "\n",
        "# 모델 생성 및 구조 확인\n",
        "model = MLP()\n",
        "print(\"모델 구조:\")\n",
        "print(model)\n",
        "\n",
        "# 파라미터 개수 계산\n",
        "total_params = sum(p.numel() for p in model.parameters())\n",
        "trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)\n",
        "print(f\"\\n총 파라미터 수: {total_params:,}\")\n",
        "print(f\"학습 가능한 파라미터 수: {trainable_params:,}\")\n",
        "\n",
        "# 각 레이어별 파라미터 수 확인\n",
        "print(\"\\n레이어별 파라미터:\")\n",
        "for name, param in model.named_parameters():\n",
        "    print(f\"{name}: {param.shape} ({param.numel():,} 개)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ut4tocwnhc",
      "metadata": {
        "id": "ut4tocwnhc"
      },
      "source": [
        "## 3. 데이터 로딩 및 전처리\n",
        "\n",
        "### 3.1 하이퍼파라미터 설정\n",
        "\n",
        "먼저 학습에 사용할 하이퍼파라미터들을 정의합니다:\n",
        "\n",
        "- **batch_size**: 한 번에 처리할 데이터의 개수\n",
        "- **learning_rate**: 학습률 (너무 크면 발산, 너무 작으면 학습이 느림)\n",
        "- **epochs**: 전체 데이터셋을 몇 번 반복할지"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "so573tx44dm",
      "metadata": {
        "id": "so573tx44dm",
        "outputId": "48963323-f0b7-445a-b99c-d97d813c8ae4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== 하이퍼파라미터 ===\n",
            "배치 크기: 128\n",
            "테스트 배치 크기: 1000\n",
            "학습률: 0.001\n",
            "에포크 수: 10\n",
            "\n",
            "사용 디바이스: cpu\n"
          ]
        }
      ],
      "source": [
        "# 하이퍼파라미터 설정\n",
        "batch_size = 128        # 배치 크기\n",
        "test_batch_size = 1000  # 테스트 배치 크기 (메모리 효율을 위해 크게 설정)\n",
        "learning_rate = 1e-3    # 학습률 (0.001)\n",
        "nb_epochs = 10           # 에포크 수\n",
        "\n",
        "print(\"=== 하이퍼파라미터 ===\")\n",
        "print(f\"배치 크기: {batch_size}\")\n",
        "print(f\"테스트 배치 크기: {test_batch_size}\")\n",
        "print(f\"학습률: {learning_rate}\")\n",
        "print(f\"에포크 수: {nb_epochs}\")\n",
        "\n",
        "# 디바이스 설정 (GPU가 있으면 GPU 사용)\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"\\n사용 디바이스: {device}\")\n",
        "if device.type == \"cuda\":\n",
        "    print(f\"GPU 이름: {torch.cuda.get_device_name(0)}\")\n",
        "    print(f\"GPU 메모리: {torch.cuda.get_device_properties(0).total_memory // 1024**3} GB\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "jkciy6jhkbj",
      "metadata": {
        "id": "jkciy6jhkbj"
      },
      "source": [
        "### 3.2 MNIST 데이터셋 로딩\n",
        "\n",
        "HuggingFace datasets 라이브러리를 사용하여 MNIST 데이터를 로드합니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "isbz53sgt4o",
      "metadata": {
        "id": "isbz53sgt4o",
        "outputId": "e0de6bdb-b523-49cc-e7b9-a93c9e00cb45",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MNIST 데이터셋을 다운로드 중...\n",
            "\n",
            "=== 데이터셋 정보 ===\n",
            "훈련 데이터: 60,000개\n",
            "테스트 데이터: 10,000개\n",
            "클래스 수: 10개 (0-9)\n",
            "이미지 크기: (28, 28)\n",
            "\n",
            "첫 번째 샘플: 라벨 5\n",
            "\n",
            "클래스별 데이터 개수:\n",
            "숫자 0: 5,923개\n",
            "숫자 1: 6,742개\n",
            "숫자 2: 5,958개\n",
            "숫자 3: 6,131개\n",
            "숫자 4: 5,842개\n",
            "숫자 5: 5,421개\n",
            "숫자 6: 5,918개\n",
            "숫자 7: 6,265개\n",
            "숫자 8: 5,851개\n",
            "숫자 9: 5,949개\n"
          ]
        }
      ],
      "source": [
        "# MNIST 데이터셋 로딩\n",
        "print(\"MNIST 데이터셋을 다운로드 중...\")\n",
        "mnist = load_dataset(\"mnist\")\n",
        "\n",
        "# 데이터셋 정보 출력\n",
        "print(\"\\n=== 데이터셋 정보 ===\")\n",
        "print(f\"훈련 데이터: {len(mnist['train']):,}개\")\n",
        "print(f\"테스트 데이터: {len(mnist['test']):,}개\")\n",
        "print(f\"클래스 수: {len(set(mnist['train']['label']))}개 (0-9)\")\n",
        "print(f\"이미지 크기: {mnist['train'][0]['image'].size}\")\n",
        "\n",
        "# 샘플 이미지 확인\n",
        "sample_image = mnist['train'][0]['image']\n",
        "sample_label = mnist['train'][0]['label']\n",
        "print(f\"\\n첫 번째 샘플: 라벨 {sample_label}\")\n",
        "\n",
        "# 클래스별 개수 확인\n",
        "from collections import Counter\n",
        "label_counts = Counter(mnist['train']['label'])\n",
        "print(\"\\n클래스별 데이터 개수:\")\n",
        "for i in range(10):\n",
        "    print(f\"숫자 {i}: {label_counts[i]:,}개\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "frspnwc8rwb",
      "metadata": {
        "id": "frspnwc8rwb"
      },
      "source": [
        "### 3.3 샘플 데이터 시각화\n",
        "\n",
        "학습하기 전에 데이터가 어떻게 생겼는지 확인해보겠습니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "uj8obxszxp",
      "metadata": {
        "id": "uj8obxszxp",
        "outputId": "32f95ed7-c6f2-4da4-eb6f-d68a42d73004",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 10 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAJGCAYAAACKvTZdAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAZAFJREFUeJzt3Xd0VXX2P+4dDL2KYEGkKHZEFB1REVABFRSxjL3O2B3bx97BMvZesM2gotgL6IiCotgd+4y9giLqYAFpopDz+8Mf+dLyTkLISQLPs1bW0vM6Zd+Tu5ObzbnnFmRZlgUAAAAA5KhWVRcAAAAAwLLHUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAKjR2rVrFwcddFDux/3666+jXr168dJLL5V5m9tvvz0KCgpi3LhxlVdYNT5+dfPpp59Gnz59omnTplFQUBCPPvpoVZc0n549e0bHjh2X+H4LCgpi4MCBxf9fkefFc889FwUFBfHcc8+Vuu4HH3wQhYWF8d5775X7OAAsnQylACj+g6SgoCBefPHFhfIsy2K11VaLgoKC2HHHHefL5m53xRVXlLjfN954o3jZwIEDo6CgIH744Yf51n3ssceiR48eseKKK0aDBg1i9dVXjz322COefPLJiPjjj7O5x0p9zfuH1oIOOuig+dZt1KhRrL766rH77rvHQw89FEVFReU5bfMZNmxYXH311Yu9/ZI0Y8aMGDhwYJn+SJxr3LhxcfDBB8caa6wR9erVi5VXXjm6d+8e5557buUVWsOdd955sdlmm8WWW25ZvGzB59i8X3Ofy0vSxIkTY+DAgfHOO+8s8X0vCw488MD473//GxdeeGEMHTo0Ntlkk6ouaalQ0s/D9dZbL/r16xfnnHNO/kUBUC0VVnUBAFQf9erVi2HDhkW3bt3mWz527NiYMGFC1K1bt8RtL7vssjjyyCOjQYMG5T7u5ZdfHieffHL06NEjTj/99GjQoEF89tln8fTTT8e9994b22+/fZx55plxyCGHFG/z+uuvx7XXXhtnnHFGrLvuusXLO3XqlDxW3bp147bbbouIiJkzZ8b48ePjsccei9133z169uwZw4cPjyZNmpT7MQwbNizee++9OP7448u97ZI2Y8aMGDRoUET8McwrzWeffRabbrpp1K9fP/7yl79Eu3bt4ttvv4233norLrnkkuJ98f9MmjQp7rjjjrjjjjsWyuZ9js1rww03jN69e8dee+2V7KXymDhxYgwaNCjatWsXnTt3LnX9/ffff4kevyabOXNmvPLKK3HmmWfG3/72t6oup0pV5HnRvXv3mDlzZtSpU6d4Wern4RFHHBF9+/aNzz//PNZYY42KlA3AUsBQCoBiffv2jQceeCCuvfbaKCz8f78ihg0bFl26dFno6qa5OnfuHO+8807cdNNN8X//93/lOubs2bPj/PPPj969e8eoUaMWyv/3v/9FRETv3r3nW16vXr249tpro3fv3mUavMxVWFgY++2333zLLrjggrj44ovj9NNPj0MPPTTuu+++cj2Gmu6qq66KadOmxTvvvBNt27adL5t7/pnfXXfdFYWFhbHTTjstlC3qOTav5ZZbLrnvLMvi119/jfr161e4zkUdu7TjLysmTZoUERHNmjWr2kKqgYo8L2rVqhX16tUr8/q9evWK5ZdfPu64444477zzFuuYACw9vH0PgGJ77713/PjjjzF69OjiZb/99ls8+OCDsc8++5S43ZZbbhnbbLNNXHrppTFz5sxyHfOHH36IX375Zb63QM1rxRVXLNf+Ftdpp50Wffr0iQceeCA++eST4uXDhw+Pfv36RatWraJu3bqxxhprxPnnnx9z5swpXqdnz57xr3/9K8aPH1/8Vq127dpFxB/n75xzzokuXbpE06ZNo2HDhrHVVlvFs88+u1AN9957b3Tp0iUaN24cTZo0iQ022CCuueaa+daZPHlyHH/88bHaaqtF3bp1o0OHDnHJJZcUv/Vw3Lhx0bJly4iIGDRoUJne1vj5559H69atFxpIRSx8/styPuaek44dO8Z//vOf6NGjRzRo0CA6dOgQDz74YET8cfXdZpttFvXr14+11147nn766fm2n/s2z48++ij22GOPaNKkSaywwgpx3HHHxa+//lriYynreZqrLOd8UR599NHYbLPNolGjRqWuO69F3bunXbt2seOOO8ZTTz0Vm2yySdSvXz9uvvnmiIgYPXp0dOvWLZo1axaNGjWKtddeO84444yI+ONePptuumlERBx88MHF3+vbb799sY7/3HPPFR9/gw02KH7758MPPxwbbLBB1KtXL7p06RJvv/32fPv8z3/+EwcddFCsvvrqxW/9/Mtf/hI//vjjQsefe4x69erFGmusETfffHPx93pBd911V3Tp0iXq168fzZs3j7322iu+/vrrspzmePvtt2OHHXaIJk2aRKNGjWLbbbeNV199tTgfOHBg8fP95JNPnq9nSzJr1qw499xzo0OHDlG3bt1YbbXV4pRTTolZs2bNt96QIUNim222iRVXXDHq1q0b6623XgwePHiR+xw5cmT06NGj+Pm36aabxrBhwxZa74MPPoitt946GjRoEKuuumpceumlZToPs2bNihNOOCFatmwZjRs3jv79+8eECRMWWm9Rz4uioqIYOHBgtGrVKho0aBBbb711fPDBBwvdw23Be0qlfh5GRNSuXbv4qlQAcKUUAMXatWsXm2++edxzzz2xww47RMQffzRNmTIl9tprr7j22mtL3HbgwIHRvXv3GDx4cLmullpxxRWjfv368dhjj8UxxxwTzZs3r/DjWFz7779/jBo1KkaPHh1rrbVWRPzxx1qjRo3i//7v/6JRo0YxZsyYOOecc+KXX36Jyy67LCIizjzzzJgyZUpMmDAhrrrqqoiI4mHFL7/8Erfddlvsvffeceihh8bUqVPjH//4R2y33Xbx73//u/gtV6NHj4699947tt1227jkkksiIuLDDz+Ml156KY477riI+ONteT169IhvvvkmDj/88GjTpk28/PLLcfrpp8e3334bV199dbRs2TIGDx4cRx55ZOyyyy6x6667RkT6bY1t27aNp59+OsaMGRPbbLNN8hyV5XzM9fPPP8eOO+4Ye+21V/z5z3+OwYMHx1577RV33313HH/88XHEEUfEPvvsE5dddlnsvvvu8fXXX0fjxo3n28cee+wR7dq1i4suuiheffXVuPbaa+Pnn3+OO++8s8Qay3KeynrOF+X333+P119/PY488sgS11nwqsLatWtH06ZNS1z/448/jr333jsOP/zwOPTQQ2PttdeO999/P3bcccfo1KlTnHfeeVG3bt347LPPim+svu6668Z5550X55xzThx22GGx1VZbRUTEFltsUeJxSvLZZ5/FPvvsE4cffnjst99+cfnll8dOO+0UN910U5xxxhlx1FFHRUTERRddFHvssUd8/PHHUavWH/+2OXr06Pjiiy/i4IMPjpVXXjnef//9uOWWW+L999+PV199tXjg9Pbbb8f2228fq6yySgwaNCjmzJkT5513XvEQdV4XXnhhnH322bHHHnvEIYccEpMmTYrrrrsuunfvHm+//Xby6qb3338/ttpqq2jSpEmccsopUbt27bj55pujZ8+excPQXXfdNZo1axYnnHBC7L333tG3b9/kgLGoqCj69+8fL774Yhx22GGx7rrrxn//+9+46qqr4pNPPpnvBumDBw+O9ddfP/r37x+FhYXx2GOPxVFHHRVFRUVx9NFHF693++23x1/+8pdYf/314/TTT49mzZrF22+/HU8++eR8/wjw888/x/bbbx+77rpr7LHHHvHggw/GqaeeGhtssEHxz+mSHHLIIXHXXXfFPvvsE1tssUWMGTMm+vXrl9xmrtNPPz0uvfTS2GmnnWK77baLd999N7bbbrtSh8Kpn4dzdenSJYYPHx6//PLLYr1dGoClSAbAMm/IkCFZRGSvv/56dv3112eNGzfOZsyYkWVZlv35z3/Ott566yzLsqxt27ZZv3795ts2IrKjjz46y7Is23rrrbOVV165eNt59zvXueeem0VENmnSpOJl55xzThYRWcOGDbMddtghu/DCC7M333wzWfMDDzyQRUT27LPPlvlxHnjggVnDhg1LzN9+++0sIrITTjiheNncxzKvww8/PGvQoEH266+/Fi/r169f1rZt24XWnT17djZr1qz5lv3888/ZSiutlP3lL38pXnbcccdlTZo0yWbPnl1ifeeff37WsGHD7JNPPplv+WmnnZYtt9xy2VdffZVlWZZNmjQpi4js3HPPLXFf83rvvfey+vXrZxGRde7cOTvuuOOyRx99NJs+ffpC65b1fPTo0SOLiGzYsGHFyz766KMsIrJatWplr776avHyp556KouIbMiQIcXL5j5P+vfvP9+xjjrqqCwisnfffbd4Wdu2bbMDDzyw+P/Lep7Kcs4X5bPPPssiIrvuuusWyg488MAsIhb66tGjR5Zl/68nvvzyy/nqj4jsySefnG9fV1111UK9sqDXX399oXOXkjr+yy+/XLxs7vekfv362fjx44uX33zzzQv13aKeE/fcc08WEdnzzz9fvGynnXbKGjRokH3zzTfFyz799NOssLAwm/cl6bhx47Llllsuu/DCC+fb53//+9+ssLBwoeULGjBgQFanTp3s888/L142ceLErHHjxln37t2Ll3355ZdZRGSXXXZZcn9ZlmVDhw7NatWqlb3wwgvzLb/pppuyiMheeuml4mWLOh/bbbddtvrqqxf//+TJk7PGjRtnm222WTZz5sz51i0qKir+77l9dOeddxYvmzVrVrbyyitnu+22W7Lmd955J4uI7Kijjppv+T777LPQz4cFnxffffddVlhYmA0YMGC+bQcOHJhFxHz99uyzzy70nCjp5+Fcw4YNyyIie+2115KPAYCln7fvATCfPfbYI2bOnBmPP/54TJ06NR5//PHkW/fmNXDgwPjuu+/ipptuKtcxBw0aFMOGDYuNNtoonnrqqTjzzDOjS5cusfHGG8eHH364OA9jscz91/ypU6cWL5v3vj5Tp06NH374IbbaaquYMWNGfPTRR6Xuc7nlliu+AXBRUVH89NNPMXv27Nhkk03irbfeKl6vWbNmMX369PneOrmgBx54ILbaaqtYfvnl44cffij+6tWrV8yZMyeef/75cj/miIj1118/3nnnndhvv/1i3Lhxcc0118SAAQNipZVWiltvvXW+dctzPho1ahR77bVX8f+vvfba0axZs1h33XVjs802K14+97+/+OKLhWqb98qSiIhjjjkmIiKeeOKJEh9PWc9TWc75osx9W9ryyy+/yLxevXoxevTo+b4W9emU82rfvn1st9128y2bezXQ8OHDK/TJkGWx3nrrxeabb178/3O/J9tss020adNmoeXzfq/mfU78+uuv8cMPP0TXrl0jIoqf43PmzImnn346BgwYEK1atSpev0OHDgtd7fPwww9HUVFR7LHHHvN9/1ZeeeVYc801F/nW17nmzJkTo0aNigEDBsTqq69evHyVVVaJffbZJ1588cX45Zdfyn5i/n8PPPBArLvuurHOOuvMV9PcKwvnrWne8zFlypT44YcfokePHvHFF1/ElClTIuKPq8umTp0ap5122kL3Y1rwrYyNGjWa7x5lderUiT/96U+L7Jd5ze2RY489dr7lZfkwhmeeeSZmz55dfIXcXHP7r6Lm9k5J9ykEYNnh7XsAzKdly5bRq1evGDZsWMyYMSPmzJkTu+++e5m27d69e2y99dZx6aWXxhFHHFGu4+69996x9957xy+//BKvvfZa3H777TFs2LDYaaed4r333ivXjXQX17Rp0yIi5nsL2fvvvx9nnXVWjBkzZqE/Zuf+gVmaO+64I6644or46KOP4vfffy9e3r59++L/Puqoo+L++++PHXbYIVZdddXo06dP7LHHHrH99tsXr/Ppp5/Gf/7zn0W+3SmiYjclX2uttWLo0KExZ86c+OCDD+Lxxx+PSy+9NA477LBo37599OrVKyLKdz5at2690B/YTZs2jdVWW22hZRF/vE1pQWuuueZ8/7/GGmtErVq15rv3zYLKep7Kcs5Tsixb5PLllluu+HyV1bzPhbn23HPPuO222+KQQw6J0047LbbddtvYddddY/fddy9+69ySMu/gKeL/fU/K8r366aefYtCgQXHvvfcu9Byc+5z43//+FzNnzowOHTosdOwFl3366aeRZdlC3/u5ateuXeLjmDRpUsyYMSPWXnvthbJ11103ioqK4uuvv47111+/xH0syqeffhoffvhhmXrvpZdeinPPPTdeeeWVmDFjxnzrTZkyJZo2bRqff/55RER07Nix1GMvqo+WX375+M9//pPcbvz48VGrVq2FPuFuUedmUdtGLPy9ad68eYnD2PKY2zuLupcYAMsWQykAFrLPPvvEoYceGt99913ssMMO5fp0qnPPPTd69uwZN99882J9qlWTJk2id+/e0bt376hdu3bccccd8dprr0WPHj3Kva/yeu+99yLi//0hNnny5OjRo0c0adIkzjvvvFhjjTWiXr168dZbb8Wpp55apqtX7rrrrjjooINiwIABcfLJJ8eKK64Yyy23XFx00UXFf5hG/HFvrXfeeSeeeuqpGDlyZIwcOTKGDBkSBxxwQNxxxx0R8ceVVr17945TTjllkceaex+silhuueVigw02iA022CA233zz2HrrrePuu++OXr16lft8lPRpXiUtL2nIM6+y/BFb1vNUlnO+KCussEJELHqItrgW9Ul79evXj+effz6effbZ+Ne//hVPPvlk3HfffbHNNtvEqFGjluin6FXke7XHHnvEyy+/HCeffHJ07tw5GjVqFEVFRbH99tsv1hVeRUVFUVBQECNHjlzk8ct7c/kloaioKDbYYIO48sorF5nPHd59/vnnse2228Y666wTV155Zay22mpRp06deOKJJ+Kqq65arPNRkX6prub2TosWLaq4EgCqmqEUAAvZZZdd4vDDD49XX3017rvvvnJt26NHj+jZs2dccsklcc4551Sojk022STuuOOO+Pbbbyu0n7IaOnRoFBQURO/evSPij0+V+vHHH+Phhx+O7t27F6/35ZdfLrRtScOSBx98MFZfffV4+OGH51vn3HPPXWjdOnXqxE477RQ77bRTFBUVxVFHHRU333xznH322dGhQ4dYY401Ytq0aaVehbOkrj7YZJNNIiKKz395zseS8umnn853FdFnn30WRUVFyU9KK+t5iij9nC9KmzZton79+pX6uOeqVatWbLvttrHtttvGlVdeGX//+9/jzDPPjGeffTZ69epV5Vea/Pzzz/HMM8/EoEGD5uv3Tz/9dL71VlxxxahXr1589tlnC+1jwWVrrLFGZFkW7du3L/egtWXLltGgQYP4+OOPF8o++uijqFWr1kJXf5XFGmusEe+++25su+22yXP+2GOPxaxZs2LEiBHzXX224FsO51699N5775X4PKuotm3bRlFRUXz++efzXR21qHOzqG0j/vjezNt/P/74Y5mGsaU9L7/88suoVavWEhmkA1CzuacUAAtp1KhRDB48OAYOHBg77bRTubefe2+pW265pdR1Z8yYEa+88sois5EjR0ZE2d5uUlEXX3xxjBo1Kvbcc8/itw3NvUJh3isSfvvtt7jxxhsX2r5hw4aLfDvfovbx2muvLfSY596naK5atWoVf2Le3I+c32OPPeKVV16Jp556aqHjTJ48OWbPnh0REQ0aNCheVhYvvPDCfG8rnGvuPWnmnv/ynI8l5YYbbpjv/6+77rqIiOSnjpX1PJXlnC9K7dq1Y5NNNok33nijbA9iMf30008LLZv7aY1z62vYsGFElP17vaQt6jkREcWfcDjver169YpHH300Jk6cWLz8s88+K+7zuXbddddYbrnlYtCgQQvtN8uyhb5vCx6nT58+MXz48Pne4vn999/HsGHDolu3bov1aW977LFHfPPNNwvdYy0iYubMmTF9+vTi48+tc64pU6bEkCFD5tumT58+0bhx47jooosW+jS7JXUF1NweWfBTUxf83izKtttuG4WFhTF48OD5ll9//fVlOnZJPw/nevPNN2P99ddPfiIlAMsGV0oBsEgHHnjgYm/bo0eP6NGjR4wdO7bUdWfMmBFbbLFFdO3aNbbffvtYbbXVYvLkyfHoo4/GCy+8EAMGDIiNNtposWtZ0OzZs+Ouu+6KiD9uyjx+/PgYMWJE/Oc//4mtt956vkHaFltsEcsvv3wceOCBceyxx0ZBQUEMHTp0kX80dunSJe677774v//7v9h0002jUaNGsdNOO8WOO+4YDz/8cOyyyy7Rr1+/+PLLL+Omm26K9dZbr/geVhF/fHT7Tz/9FNtss020bt06xo8fH9ddd1107tw51l133YiIOPnkk2PEiBGx4447xkEHHRRdunSJ6dOnx3//+9948MEHY9y4cdGiRYuoX79+rLfeenHffffFWmutFc2bN4+OHTuWeP+aSy65JN58883Yddddi4cyb731Vtx5553RvHnz4hsjl+d8LClffvll9O/fP7bffvt45ZVXij/efsMNNyxxm7Kep7Kc85LsvPPOceaZZ1bqR9qfd9558fzzz0e/fv2ibdu28b///S9uvPHGaN26dXTr1i0i/rjiplmzZnHTTTdF48aNo2HDhrHZZpst8h5VlaFJkybRvXv3uPTSS+P333+PVVddNUaNGrXIq8gGDhwYo0aNii233DKOPPLImDNnTlx//fXRsWPHeOedd4rXW2ONNeKCCy6I008/PcaNGxcDBgyIxo0bx5dffhmPPPJIHHbYYXHSSSeVWNMFF1wQo0ePjm7dusVRRx0VhYWFcfPNN8esWbPi0ksvXazHuf/++8f9998fRxxxRDz77LOx5ZZbxpw5c+Kjjz6K+++/P5566qnYZJNNok+fPsVX3x1++OExbdq0uPXWW2PFFVec74rPJk2axFVXXRWHHHJIbLrpprHPPvvE8ssvH++++27MmDEj+fbRsurcuXPsvffeceONN8aUKVNiiy22iGeeeWaRV6staKWVVorjjjsurrjiiuL+e/fdd2PkyJHRokWLUq+EKunnYUTE77//HmPHjl3oJuoALKNy/7w/AKqduR8H/vrrryfXa9u2bdavX7/5lkVEdvTRRy+07tyPCV9wv+eee+58H3P/+++/Z7feems2YMCArG3btlndunWzBg0aZBtttFF22WWXZbNmzVpkLQ888MBCH0NemgMPPLC4pojIGjRokLVr1y7bbbfdsgcffDCbM2fOQtu89NJLWdeuXbP69etnrVq1yk455ZTsqaeeWujY06ZNy/bZZ5+sWbNmWUQUfxx6UVFR9ve//734sW200UbZ448/nh144IHzfWT6gw8+mPXp0ydbccUVszp16mRt2rTJDj/88Ozbb7+dr56pU6dmp59+etahQ4esTp06WYsWLbItttgiu/zyy7PffvuteL2XX34569KlS1anTp2FPv59UY/x6KOPzjp27Jg1bdo0q127dtamTZvsoIMOyj7//PPFOh89evTI1l9//YWOtajnUJYt/Dya+zz54IMPst133z1r3Lhxtvzyy2d/+9vfspkzZy60z3k/or6s56ms53xRvv/++6ywsDAbOnTofMsPPPDArGHDhiVuN7fXvvzyy1LPyTPPPJPtvPPOWatWrbI6depkrVq1yvbee+/sk08+mW+94cOHZ+utt15WWFiYRUQ2ZMiQJXL8RfX2l19+mUVEdtlllxUvmzBhQrbLLrtkzZo1y5o2bZr9+c9/ziZOnLjI590zzzyTbbTRRlmdOnWyNdZYI7vtttuyE088MatXr95Cx3/ooYeybt26ZQ0bNswaNmyYrbPOOtnRRx+dffzxxyU+vrneeuutbLvttssaNWqUNWjQINt6662zl19+udTHkvLbb79ll1xySbb++utndevWzZZffvmsS5cu2aBBg7IpU6YUrzdixIisU6dOWb169bJ27dpll1xySfbPf/5zofM+d90tttgiq1+/ftakSZPsT3/6U3bPPfcU5yX10YI/P0oyc+bM7Nhjj81WWGGFrGHDhtlOO+2Uff311wt9bxb1vJg9e3Z29tlnZyuvvHJWv379bJtttsk+/PDDbIUVVsiOOOKI4vXm/qwvy8/DLMuykSNHZhGRffrpp6XWD8DSryDLavBdEgGApdLAgQNj0KBBMWnSpGp7M+S//vWv8cknn8QLL7xQ1aXUaAMGDIj3339/oftQUf1Mnjw5ll9++bjgggvizDPPXKx9DBgwIAoKCuKRRx5ZwtUBUBO5pxQAwGI499xz4/XXX4+XXnqpqkupMWbOnDnf/3/66afxxBNPRM+ePaumIEq04Pcq4v/dj2pxv18ffvhhPP7443H++edXoDIAlibuKQUAsBjatGmz0E2qSVt99dXjoIMOitVXXz3Gjx8fgwcPjjp16sQpp5xS1aWxgPvuuy9uv/326Nu3bzRq1ChefPHFuOeee6JPnz6x5ZZbLtY+11133eIPGgCACEMpAABysv3228c999wT3333XdStWzc233zz+Pvf/178iZdUH506dYrCwsK49NJL45dffim++fkFF1xQ1aUBsBRxTykAAAAAcueeUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuTOUAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoVcMMHDgwCgoKFmvb22+/PQoKCmLcuHFLtihgkfQr1Dz6FmoO/Qo1j75lQYZSVWhuU839qlevXrRq1Sq22267uPbaa2Pq1KmVXsONN94Yt99+e7m2GTFiRGy88cZRr169aNOmTZx77rkxe/bsyikQqoma2K/33Xdf7LfffrHmmmtGQUFB9OzZs9Jqg+qopvXtjz/+GJdddll07949WrZsGc2aNYuuXbvGfffdV7lFQjVQ0/o1IuKEE06IjTfeOJo3bx4NGjSIddddNwYOHBjTpk2rvCKhGqmJfTuvzz//POrVqxcFBQXxxhtvLNnCKLOCLMuyqi5iWXX77bfHwQcfHOedd160b98+fv/99/juu+/iueeei9GjR0ebNm1ixIgR0alTp+JtZs+eHbNnz4569eqV+3hz5syJ33//PerWrVs8ne7YsWO0aNEinnvuuTLtY+TIkdGvX7/o2bNn7L333vHf//43brjhhjjssMNi8ODB5a4Jaoqa2K89e/aMN998MzbddNN45513olOnTmXeFpYGNa1vH3/88dh1112jb9++sfXWW0dhYWE89NBD8eyzz8Y555wTgwYNKndNUFPUtH6NiOjWrVt06dIlOnToEPXq1Yu33347/vnPf8Ymm2wSzz//fNSq5d//WbrVxL6dV//+/WPMmDExffr0eP3112OTTTYp9z5YAjKqzJAhQ7KIyF5//fWFsmeeeSarX79+1rZt22zGjBmVVsP666+f9ejRo8zrr7feetmGG26Y/f7778XLzjzzzKygoCD78MMPK6FCqB5qYr9+9dVX2Zw5cxZrW1ga1LS+/eKLL7Jx48bNt6yoqCjbZpttsrp162bTpk2rhAqheqhp/VqSyy+/PIuI7JVXXlkyRUE1VpP79sknn8zq1KmTnXXWWSU+BvJhfF9NbbPNNnH22WfH+PHj46677ipevqj34M6cOTOOPfbYaNGiRTRu3Dj69+8f33zzTRQUFMTAgQOL11vwPbjt2rWL999/P8aOHVt8yWXq7T0ffPBBfPDBB3HYYYdFYWFh8fKjjjoqsiyLBx98cIk8dqhpqmO/RkSsttpq/pUWSlAd+7Z9+/bRtm3b+ZYVFBTEgAEDYtasWfHFF19U+HFDTVQd+7Uk7dq1i4iIyZMnl3tbWJpU5779/fff47jjjovjjjsu1lhjjSXxcKkAf61UY/vvv39ERIwaNSq53kEHHRTXXXdd9O3bNy655JKoX79+9OvXr9T9X3311dG6detYZ511YujQoTF06NA488wzS1z/7bffjohY6LLGVq1aRevWrYtzWBZVt34FSldT+va7776LiIgWLVqUe1tYWlTXfp09e3b88MMPMXHixBg1alScddZZ0bhx4/jTn/5UtgcGS7Hq2rdXX311/Pzzz3HWWWeV7YFQqQpLX4Wq0rp162jatGl8/vnnJa7z1ltvxf333x/HH398XHXVVRHxx5VLBx98cLz77rvJ/Q8YMCDOOuusaNGiRey3336l1vPtt99GRMQqq6yyULbKKqvExIkTS90HLK2qW78CpasJffvTTz/FbbfdFltttdUif//CsqK69usbb7wRm2++efH/r7322jFixIho3rx5mfcBS6vq2LffffddnH/++XH55ZdHkyZNyv5gqDSulKrmGjVqlPzUgieffDIi/mjceR1zzDFLvJaZM2dGRETdunUXyurVq1ecw7KqOvUrUDbVuW+Liopi3333jcmTJ8d1111X6ceD6q469ut6660Xo0ePjkcffTROOeWUaNiwoU/fg3lUt7499dRTY/XVV49DDjmkUvZP+blSqpqbNm1arLjiiiXm48ePj1q1akX79u3nW96hQ4clXkv9+vUjImLWrFkLZb/++mtxDsuq6tSvQNlU57495phj4sknn4w777wzNtxww0o/HlR31bFfmzRpEr169YqIiJ133jmGDRsWO++8c7z11lv6FqJ69e2rr74aQ4cOjWeeecZ9V6sR34lqbMKECTFlypRq8wfr3LcNzH0b37y+/fbbaNWqVd4lQbVR3foVKF117ttBgwbFjTfeGBdffHHxPTlgWVad+3Veu+66a0RE3HvvvVVcCVS96ta3p5xySmy11VbRvn37GDduXIwbNy5++OGHiPjj79mvvvqqiitcNhlKVWNDhw6NiIjtttuuxHXatm0bRUVF8eWXX863/LPPPivTMRb85IOUzp07R8Qf752f18SJE2PChAnFOSyLqlu/AqWrrn17ww03xMCBA+P444+PU089tdzbw9KouvbrgmbNmhVFRUUxZcqUCu8Larrq1rdfffVVPP/889G+ffvir5NPPjkiIvr37x+dOnUq875YcgylqqkxY8bE+eefH+3bt4999923xPXmNviNN9443/Ky3nuiYcOGZf7I2vXXXz/WWWeduOWWW2LOnDnFywcPHhwFBQWx++67l2k/sLSpjv0KpFXXvr3vvvvi2GOPjX333TeuvPLKMm8HS7Pq2K+TJ0+O33//faHlt912W0Qs/GnVsKypjn17yy23xCOPPDLf19x7V11++eVx9913l2k/LFnuKVUNjBw5Mj766KOYPXt2fP/99zFmzJgYPXp0tG3bNkaMGBH16tUrcdsuXbrEbrvtFldffXX8+OOP0bVr1xg7dmx88sknEVH65LhLly4xePDguOCCC6JDhw6x4oorxjbbbFPi+pdddln0798/+vTpE3vttVe89957cf3118chhxwS66677uKdAKhBalK/Pv/88/H8889HRMSkSZNi+vTpccEFF0RERPfu3aN79+7lffhQI9WUvv33v/8dBxxwQKywwgqx7bbbLvTieIsttojVV1+9nI8eapaa0q/PPfdcHHvssbH77rvHmmuuGb/99lu88MIL8fDDD8cmm2zik3JZptSUvu3Tp89Cy+YOtHr06GGYXFUyqsyQIUOyiCj+qlOnTrbyyitnvXv3zq655prsl19+WWibc889N1vw2zZ9+vTs6KOPzpo3b541atQoGzBgQPbxxx9nEZFdfPHFCx3vyy+/LF723XffZf369csaN26cRUTWo0ePUut+5JFHss6dO2d169bNWrdunZ111lnZb7/9ttjnAWqCmtivc4+/qK9zzz23IqcDaoSa1rcL1rvg15AhQyp6SqDaqmn9+tlnn2UHHHBAtvrqq2f169fP6tWrl62//vrZueeem02bNq3C5wNqgprWt6nH8Prrr5drO5acgizLsiU+6aLKvfPOO7HRRhvFXXfdlbxcEqh6+hVqHn0LNYd+hZpH3y473FNqKTBz5syFll199dVRq1Ytb8+Baka/Qs2jb6Hm0K9Q8+jbZZt7Si0FLr300njzzTdj6623jsLCwhg5cmSMHDkyDjvssFhttdWqujxgHvoVah59CzWHfoWaR98u27x9bykwevToGDRoUHzwwQcxbdq0aNOmTey///5x5plnRmGhuSNUJ/oVah59CzWHfoWaR98u2wylAAAAAMide0oBAAAAkDtDKQAAAAByZygFAAAAQO7KfNewgoKCyqwDWISK3PJNz0L+9CzULHoWahY9CzVLWXrWlVIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuTOUAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkrrOoCqHpdunRJ5n/729+S+QEHHJDM77zzzmR+3XXXJfO33normQMAAAA1jyulAAAAAMidoRQAAAAAuTOUAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByV5BlWVamFQsKKrsWKknnzp2T+ZgxY5J5kyZNlmA1C5syZUoyX2GFFSr1+NVZGdtzkfQsi+uss85K5oMGDUrmtWqV/O8dPXv2TG47duzYZF7d6VkWpXHjxsm8UaNGybxfv37JvGXLlsn8yiuvTOazZs1K5kszPVs9rbXWWsm8du3aybx79+7J/MYbb0zmRUVFybyqDR8+vMRsr732Sm7722+/LelycqVnqYm23XbbErO77747uW2PHj2S+ccff7xYNeWlLD3rSikAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwVVnUBVNyf/vSnZP7QQw8l86ZNmybzLMuS+dSpU5P5b7/9lsxXWGGFZN61a9cSs7feeqtCx4Zl0UEHHZTMTz311GReVFS02Mcu7ecJVEft2rVL5qX1zOabb57MO3bsWN6SymWVVVZJ5scee2ylHp9lz/rrr5/MS/s99Oc//zmZ16qV/nf1Vq1aJfPSfo9V999V/fv3LzG76aabktsef/zxyfyXX35ZnJIog+7duyfz0v4meuSRR5ZkOeRo0003LTF7/fXXc6ykenKlFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJXWNUFENGgQYNkvvHGGyfzu+66K5mX9lHQFfXpp58m80svvTSZ33vvvcn8pZdeKjE766yzkttedNFFyRyWRW3btk3m9erVy6kSyMc666yTzEv7iPR99903mdevXz+ZFxQUJPOvv/46mU+dOjWZr7vuusl8jz32SOY33nhjidlHH32U3BYWpbTXX3379s2pkmXPAQcckMz/8Y9/JPPU624qpmfPnsl8zTXXTOaPPPLIEqyGJalWrfS1Pu3bty8xK+11eWmvIZYGrpQCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMhdYVUXQMTNN9+czPfee++cKlk8G2+8cTJv1KhRMh87dmwy79mzZ4lZp06dktvCsqhXr17J/JhjjqnQ/j/66KNkvuOOO5aYff/99xU6Nsumpk2bJvNLLrkkme+5557JvHHjxuWuqTw+/fTTZL7ddtsl89q1ayfz0nqyRYsWFcqhvEaPHp3M+/btW6H9/+9//0vm//jHP5J5rVrpf5cvKioqd03z2mKLLZJ5jx49KrR/aqYDDjggmb/yyis5VcKStsoqqyTzQw89tMTsrrvuSm5b2u/4pYErpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcldY1QUsC7p06ZLM+/Xrl8wLCgoqdPyxY8cm88ceeyyZX3755cl84sSJyfztt99O5j///HMy32abbUrMKnpuoCbq1q1bMh8yZEgyb9q0aYWOf9lllyXz8ePHV2j/sKBddtklmR9yyCE5VbJon3/+eTLv3bt3Mv/666+TeYcOHcpdE1SlwYMHJ/NHH320Qvv//fffk/l3331Xof1XVJMmTZL5e++9l8xbtWq12Mcu7dy+8cYbi71vKqZWLdeDLK1uu+22xd72008/XYKV1Ew6AwAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4VVXcDSoHPnzsl89OjRybxJkybJPMuyZD5y5MhkvvfeeyfzHj16JPOzzjormd92223JfNKkScn83XffTeZFRUUlZv369Utuu/HGGyfzt956K5lDdXTggQcm81atWlVo/88991wyv/POOyu0fyivP//5z5W6/3HjxiXz119/PZmfeuqpyfzrr78ub0nzWXfddSu0PeRt9uzZybyiPVHdbbfddsl8+eWXr7RjT5gwIZnPmjWr0o69rOvUqVMyX2mllXKqhLw1bdp0sbctbVawLHClFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gqruoCaYK211krmJ598cjJv2rRpMv/hhx+S+bfffpvM77jjjmQ+bdq0ZP6vf/2rQnlVql+/fjI/8cQTk/m+++67JMuBJaJFixbJ/C9/+UsyLyoqSuaTJ09O5hdccEEyh7wdeuihyfywww5L5qNGjUrmn332WTL/3//+l8wr20orrVSlxwfmt9deeyXz0n5mlfb6tSLOOeecSts3aX379k3mlfl9p3KV9nu4ffv2i73vb775ZrG3XVq4UgoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeFVV1AdVC3bt1kfvnllyfzvn37JvOpU6cm8wMOOCCZv/HGG8m8fv36yXxZ1qZNm6ouARbSrl27ZP7QQw9V6vGvu+66ZP7ss89W6vGhvCZOnJjMBw4cmE8hVWTzzTev6hJgqbLvvvsm89NOOy2Zd+jQIZnXrl273DWVxzvvvFNi9vvvv1fqsSnZ2muvXaHt33///SVUCUtaafOAlVZaKZl/8sknJWalzQqWBa6UAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADIXWFVF1AdbLTRRsm8b9++Fdr/zjvvnMzHjh1bof0DNcv222+fzDt16lSh/T/zzDPJ/JprrqnQ/mFZc+yxxybzhg0bVurxN9hggwpt//LLLyfzV155pUL7hwW1a9cume+///7JvFevXkuwmoV169YtmWdZVqnH/+WXX5L5aaedlsyfeOKJErOZM2cuVk1Uvddff72qS6ixmjRpksxLe+293377JfM+ffqUu6Z5nX/++SVmkydPrtC+lwaulAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyF1hVRdQHVx55ZXJvKCgIJmPHTu2QjlptWqVPDstKirKsRIomwEDBiTziy++uEL7f/HFF5P5gQcemMynTJlSoeNDddOgQYNkvt566yXzc889N5n37du33DXNK/V7LKLiv8smTpyYzA8++OBkPmfOnAodn2VPx44dk/mIESOSeZs2bZZkOTXOCy+8kMxvueWWnCqhOmnevHmVHXvDDTdM5qX9PdyrV69k3rp162Rep06dZL7vvvsm89J+z86cOTOZv/baa8l81qxZybywMD1WefPNN5P5ss6VUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuSus6gLysuOOO5aYde7cObltlmXJfMSIEYtTEmVUVFRUYlba9+add95ZwtVARLt27ZL5Qw89VKnH/+KLL5L5999/X6nHhyWtdu3ayXyjjTZK5qX13CqrrJLMZ86cmcwnTpyYzF955ZVkvv322yfzBg0aJPPSFBamX87tuuuuyfyaa64pMfvtt98WqyaWbQUFBRXKK1utWul/l0+99lwSUn+XRETssMMOyXzkyJFLshyWkNJ+l5T2d8tNN92UzM8444xy11RWnTp1Sual9ezs2bOT+YwZM5L5Bx98kMz/+c9/JvM33ngjmY8dOzaZl/baecKECcm8fv36yfyjjz5K5ss6V0oBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOSusKoLyEv9+vVLzOrUqZPc9n//+18yv++++xarpmVF3bp1k/nAgQMXe99jxoxJ5qeffvpi7xtKcuqppybzoqKiSj3+xRdfXKn7hyWttN+z22+/fTJ/+OGHK3T8QYMGJfPSfpe89NJLybx58+YV2n/Hjh2TeWlatmyZzC+66KJk/tVXX5WYPfroo8ltZ82alcxZOr333nvJvGfPnsl8v/32S+ZPPfVUMv/111+TeWX761//msyPOeaYnCqhOjnqqKOS+fjx45P5FltssSTLKZfU74GI0n8XfPjhh8n81VdfLW9JuTrssMOSeWm/Z7/44oslWc4yx5VSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5K6zqAmqCWbNmJfNvv/02p0qqp7p16ybzs846K5mffPLJyXzChAklZldccUVy22nTpiVzWJTOnTsn8z59+lTq8YcPH57MP/7440o9PiyO2rVrl5gNGjQouW1pvwdKM3LkyGR+3XXXJfPJkycn85YtWybzJ554IplvsMEGyfy3335L5pdeemky79ixYzLfeeedk/ndd99dYvb0008nt73kkkuS+c8//5zMS/POO+9UaHuqxvjx45P5hRdemFMllWPgwIHJ/JhjjsmnEGqU0n5eUnW23XbbCm3/0EMPLaFKlk2ulAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyF1hVRdQE4wYMaKqS6hSnTt3TuYnn3xyMt9zzz2T+fDhw5P5brvtlsxhSRs1alQyX3755Su0/1dffTWZH3TQQRXaP1SG5ZZbLpmff/75JWYnnXRSctvp06cn89NOOy2Z33vvvcl88uTJyXyTTTZJ5tdff30y32ijjZL5p59+msyPPPLIZP7ss88m8yZNmiTzLbbYIpnvu+++JWb9+/dPbjt69OhkXpqvv/46mbdv375C+4fKsN1221V1CUA18sgjj1R1CTWaK6UAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJXWNUF5KWgoGCxsoiIAQMGJPPjjjtucUqqNk444YRkfvbZZyfzpk2bJvO77747mR9wwAHJHPK2wgorJPOioqIK7f/GG29M5tOmTavQ/qEyHHbYYcn8pJNOKjGbMWNGctvDDz88mY8aNSqZd+3aNZkffPDByXyHHXZI5vXr10/m5513XjIfMmRIMv/666+TeWl++eWXZP7kk08udr733nsnt91nn32SeWlKew1C5aldu3aJWZ8+fZLbjhkzJpnPnDlzsWqqLkr7mXHNNdfkVAnA0s+VUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuSus6gLykmXZYmURESuvvHIyv/baa5P5P//5z2T+448/JvOuXbsm8/333z+Zb7jhhsm8devWyfyrr75K5k899VQyv/HGG5M55G3IkCHJvFatyp3Xv/zyy5W6f6gM55xzzmJvu9xyyyXzk08+OZkPHDgwmXfo0KG8JZVLace/6KKLkvmcOXOWYDX5uueeeyqUU3W6deuWzM8888wSs969eye3bd++fTL/+uuvk3lla968eTLv27dvMr/yyiuTeYMGDcpd07xmzpyZzH/99dcK7R9YsgoKCpL5WmutlcxfffXVJVnOUseVUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMhdYVUXUBOU9lHWRx11VDLfbbfdkvkvv/ySzNdcc81kXlGlfTz9s88+m8wr8jHhUBk6d+6czHv16pXMi4qKkvlvv/2WzG+44YZk/v333ydzqI6+++67ZN6yZcsSs7p16ya33XDDDRerprmeeOKJZP78888n80cffTSZjxs3LpnPmTMnmUNVuP7665N5x44dF3vfp5xySjKfOnXqYu97Sejdu3cy33jjjZN5lmUVOv5zzz2XzAcPHpzMS3vtDeSrtJ8JtWq51qcinD0AAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwVVnUBeXnllVdKzF5//fXktptuummFjr3yyisn85VWWqlC+//xxx+T+b333pvMjzvuuAodH6qbZs2aJfPSerI033zzTTI/6aSTKrR/qI66d++ezAcMGFBitvHGGye3/d///pfM//nPfybzn3/+OZn/9ttvyRwonyOPPLKqS6hUpf1Meuyxx5J5aa+tf/3113LXBFRfm2++eTK//fbb8ymkhnKlFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gqruoC8TJgwocRs1113TW57+OGHJ/OzzjprsWoqq2uuuSaZDx48OJl/9tlnS7IcAJZBU6dOTeZDhw5drAyoHAcddFAyP+aYY0rMDjzwwCVczZL1+eefJ/MZM2Yk8xdeeCGZ33LLLcn8vffeS+bA0qWgoKCqS1iquVIKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuTOUAgAAACB3BVmWZWVasaCgsmsBFlDG9lykZblnV1555WR+3333JfNu3bol8y+//DKZd+jQIZmz9NKzULMsyz1bt27dErODDjooue0FF1yQzJdffvlk/uijjybz0aNHJ/Phw4cn8++++y6ZU3Mtyz1L5SntZ94///nPZH7rrbcm88MPP7y8JS01ytKzrpQCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMhdQZZlWZlWLCio7FqABZSxPRdJz0L+9CzULHoWahY9CzVLWXrWlVIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuSvIsiyr6iIAAAAAWLa4UgoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuTOUAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkzlAKAAAAgNwZSgEAAACQO0OpGmbgwIFRUFCwWNvefvvtUVBQEOPGjVuyRQEl0rNQs+hZqFn0LNQsepYFGUpVoblNNferXr160apVq9huu+3i2muvjalTp1Z6DTfeeGPcfvvtZV6/Xbt289U89+uII46ovCKhmqiJPRsRMXXq1DjllFOiffv2Ubdu3Vh11VVj9913jxkzZlROkVBN1LSefe655xb5O3bu14UXXli5xUIVq2k9GxHx66+/xkUXXRTrrbdeNGjQIFZdddX485//HO+//37lFQnVRE3s2WnTpsXxxx8frVu3jrp168a6664bgwcPrrwCKVVBlmVZVRexrLr99tvj4IMPjvPOOy/at28fv//+e3z33Xfx3HPPxejRo6NNmzYxYsSI6NSpU/E2s2fPjtmzZ0e9evXKfbw5c+bE77//HnXr1i2eTnfs2DFatGgRzz33XJn20a5du1h++eXjxBNPnG/5WmutFX/605/KXRPUJDWxZ6dMmRI9evSICRMmxGGHHRYdOnSISZMmxQsvvBBDhw6N5Zdfvtx1QU1R03r2+++/j9GjRy+0fOjQoTFq1Kj497//HZtuumm564Kaoqb1bETEbrvtFiNGjIhDDz00Nt5445g4cWLccMMNMXPmzPjvf/8bbdu2LXddUFPUtJ6dM2dOdO/ePd544404+uijY80114ynnnoqhg8fHhdeeGGcccYZ5a6JJSCjygwZMiSLiOz1119fKHvmmWey+vXrZ23bts1mzJhRaTWsv/76WY8ePcq8ftu2bbN+/fpVWj1QndXEnj3yyCOzZs2aZV988UWl1QTVVU3s2UXp0KFDtuaaay6ZgqAaq2k9O2HChCwispNOOmm+5WPGjMkiIrvyyisroUKoPmpaz95///1ZRGT/+Mc/5lu+2267ZfXq1cu+//77SqiQ0nj7XjW1zTbbxNlnnx3jx4+Pu+66q3j5ot6DO3PmzDj22GOjRYsW0bhx4+jfv3988803UVBQEAMHDixeb8H34LZr1y7ef//9GDt2bPEllz179ixTfb/99ltMnz69og8TlhrVsWcnT54cQ4YMicMOOyzat28fv/32W8yaNWtJPmyosapjzy7Kv//97/jss89i3333XdyHCkuF6tizc9+atNJKK823fJVVVomIiPr161fgEUPNVh179oUXXoiIiL322mu+5XvttVf8+uuvMXz48Io9aBaLoVQ1tv/++0dExKhRo5LrHXTQQXHddddF375945JLLon69etHv379St3/1VdfHa1bt4511lknhg4dGkOHDo0zzzyz1O3GjBkTDRo0iEaNGkW7du3immuuKdsDgqVcdevZF198MX799dfo0KFD7L777tGgQYOoX79+bLnllvHOO++U67HB0qi69eyi3H333RERhlIQ1a9n11hjjWjdunVcccUV8dhjj8WECRPi3//+dxxxxBHRvn37hf7whWVNdevZWbNmxXLLLRd16tSZb3mDBg0iIuLNN98s9ZgseYVVXQAla926dTRt2jQ+//zzEtd566234v7774/jjz8+rrrqqoiIOOqoo+Lggw+Od999N7n/AQMGxFlnnRUtWrSI/fbbr0w1derUKbp16xZrr712/Pjjj3H77bfH8ccfHxMnToxLLrmk7A8OlkLVrWc//fTTiIg4/fTTY4011og777wzpkyZEoMGDYptttkm3n///eJ/zYVlUXXr2QXNmTMn7rvvvvjTn/4UHTp0KPf2sLSpbj1bu3bteOihh2KfffaJ/v37Fy/v0qVLvPzyy9GsWbOyPTBYSlW3nl177bVjzpw58eqrr0a3bt2Kl8+9guqbb74py8NiCXOlVDXXqFGj5KcWPPnkkxHxR+PO65hjjqmUekaMGBGnnHJK7LzzzvGXv/wlxo4dG9ttt11ceeWVMWHChEo5JtQk1alnp02bFhERBQUF8cwzz8Q+++wTRx55ZDz66KPx888/xw033LDEjwk1TXXq2QU988wz8f3337tKCuZR3Xp2+eWXj86dO8dpp50Wjz76aFx++eUxbty4+POf/xy//vprpRwTapLq1LP77LNPNG3aNP7yl7/E6NGjY9y4cXHLLbfEjTfeGBF/vI2Q/BlKVXPTpk2Lxo0bl5iPHz8+atWqFe3bt59veV7/olpQUBAnnHBCzJ49u8yfUgJLs+rUs3PvZbHTTjtFo0aNipd37do12rdvHy+//PISPybUNNWpZxd09913x3LLLRd77rlnpR8Laorq1LNTpkyJrbbaKjbffPO46KKLYuedd44TTzwxHnrooXjxxRdjyJAhS/yYUNNUp55deeWVY8SIETFr1qzo06dPtG/fPk4++eS47rrrIiLme71MfgylqrEJEybElClTqv0l+6uttlpERPz0009VXAlUrerWs61atYqIhW/AGhGx4oorxs8//5x3SVCtVLeendfMmTPjkUceiV69ei2yh2FZVN169qGHHorvv/9+vrfuRUT06NEjmjRpEi+99FIVVQbVQ3Xr2YiI7t27xxdffBFvv/12vPjii/HNN99E165dIyJirbXWquLqlk2GUtXY0KFDIyJiu+22K3Gdtm3bRlFRUXz55ZfzLf/ss8/KdIwFP/lgcXzxxRcREdGyZcsK7wtqsurWs126dImIRb8/fuLEiXqWZV5169l5jRgxIqZOneqtezCP6taz33//fUT8cf+3eWVZFnPmzInZs2eXeV+wNKpuPTvXcsstF507d44tt9wyGjVqFE8//XRERPTq1avc+6LiDKWqqTFjxsT5558f7du3T74gndvgc98HO9fcSxBL07Bhw5g8eXKZ1v3pp58W+qX7+++/x8UXXxx16tSJrbfeukz7gaVRdezZtddeOzbccMMYPnx4/PDDD8XLR40aFV9//XX07t27TPuBpVF17Nl5DRs2LBo0aBC77LJLubeFpVF17Nm5V1Xce++98y0fMWJETJ8+PTbaaKMy7QeWRtWxZxdl0qRJcckll0SnTp0MpaqIT9+rBkaOHBkfffRRzJ49O77//vsYM2ZMjB49Otq2bRsjRoyIevXqlbhtly5dYrfddourr746fvzxx+jatWuMHTs2Pvnkk4gofXLcpUuXGDx4cFxwwQXRoUOHWHHFFWObbbZZ5LojRoyICy64IHbfffdo3759/PTTTzFs2LB477334u9//3usvPLKi38SoAapKT0bEXHVVVdF7969o1u3bnH44YfHlClT4sorr4y11lorjjzyyMU7AVDD1KSejfjjH4FGjhwZu+22m/tbsEyqKT270047xfrrrx/nnXdejB8/Prp27RqfffZZXH/99bHKKqvEX//618U/CVCD1JSejfjj7bWbb755dOjQIb777ru45ZZbYtq0afH4449HrVqu2akSGVVmyJAhWUQUf9WpUydbeeWVs969e2fXXHNN9ssvvyy0zbnnnpst+G2bPn16dvTRR2fNmzfPGjVqlA0YMCD7+OOPs4jILr744oWO9+WXXxYv++6777J+/fpljRs3ziIi69GjR4n1vvHGG9lOO+2UrbrqqlmdOnWyRo0aZd26dcvuv//+Cp8LqAlqWs/ONXr06Kxr165ZvXr1subNm2f7779/9u233y72eYCaoqb27E033ZRFRDZixIjFfuxQE9XEnv3pp5+yE044IVtrrbWyunXrZi1atMj22muv7IsvvqjQuYCaoCb27AknnJCtvvrqWd26dbOWLVtm++yzT/b5559X6DxQMQVZlmWVO/aiKrzzzjux0UYbxV133eV+FFAD6FmoWfQs1Cx6FmoWPbvscH3aUmDmzJkLLbv66qujVq1a0b179yqoCEjRs1Cz6FmoWfQs1Cx6dtnmnlJLgUsvvTTefPPN2HrrraOwsDBGjhwZI0eOjMMOOyxWW221qi4PWICehZpFz0LNomehZtGzyzZv31sKjB49OgYNGhQffPBBTJs2Ldq0aRP7779/nHnmmVFYaO4I1Y2ehZpFz0LNomehZtGzyzZDKQAAAABy555SAAAAAOTOUAoAAACA3BlKAQAAAJC7Mt81rKCgoDLrABahIrd807OQPz0LNYuehZpFz0LNUpaedaUUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2h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mVe0p0pT2fuHxTF58uQSswEDBiS3ffzxx5N58+bNk/nnn3+ezIcPH57Mb7/99mT+008/JfPSfmasssoqFdqequVKKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BVWdQFUvcmTJyfzoUOHJvPbbrstmRcWpp9m3bt3T+Y9e/YsMXvuueeS27J0atasWTIvKChI5sOHD6/Q8Tt37pzM27Vrl8xLq+/EE09M5mPHjk3ma621VjIfNmxYMq9ofVdffXUyh5rm73//ezKvVSv9b3xFRUUVOn5pPQ95a9WqVTI/+OCDk/luu+2WzLMsS+ZvvfVWMn/33XeTeWn1rbjiiskcqpvXXnstmbds2TKnShZPaX8P9ujRI5mX9nv2iy++KHdN5MeVUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuSus6gKofJ06dUrmu+++ezLfdNNNk3lhYcWeRh988EEyf/755yu0f5Y9WZZVKK+ooqKiCh2/tJ796quvknm9evWS+ZdffpnMt9pqq2Q+ZcqUZA41TZ06dZL5RhttlMwr2vPHHXdcMv/000+TOeRt2223TebnnXdehfZ/1llnJfPrr78+mQ8YMCCZH3zwwcm8tNemwJJVv379ZF7R37P33ntvuWsiP66UAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADIXWFVF0Dp1l577WT+t7/9LZnvuuuuyXzllVcud03lMWfOnGT+7bffJvOioqIlWQ5LgeHDhyfzk08+OZnvvPPOybxr167JvHPnzsm8cePGybw0BxxwQDIvKChI5j/88EMyHzhwYDL/5ptvkjnUNA0aNEjm++23XzLv3bt3hY5/zz33JPO77747mfs9SN569uyZzK+99toK7b9///7J/Omnn07mpb12Peecc8pd07zGjRtXoe2B8nnqqaequgSqkCulAAAAAMidoRQAAAAAuTOUAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByV1jVBSwLVl555WS+9957J/O//e1vybxdu3blLWmJeuONN5L5hRdemMxHjBixJMthGfD7778n8xkzZiTzBg0aJPOXXnopmWdZlswr29SpU5P5/fffn8xHjhy5JMuBKte4ceNkfuuttybz3XffvULHP+GEE5L59ddfn8yLiooqdHxY0nr37p3MmzZtmszHjh2bzB9//PFkXrt27WS+4447JvPS6isoKEjmkyZNSubAkrXddttVdQlUIVdKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeFVV1ATbDSSisl8/XWWy+Zl/ZR0Ouss065a1qSXnvttWR+2WWXJfPhw4cncx91zZL25ptvJvO99947mf/f//1fMu/Zs2d5SyqXO+64I5n/97//TeZvv/12Mi/to7hhabPqqqsm8913371C+//888+T+bXXXluh/UN1U9prtyzLKpTXrl07mQ8YMCCZX3PNNcn8559/Tua33XZbMh88eHAyB5as1VdfvapLoAq5UgoAAACA3BlKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeFVV1AXpo3b15idvPNNye37dy5czJfffXVF6ekJebll19O5ldccUUyf+qpp5L5zJkzy10TVKV//etfFcqB6mWdddZJ5ieeeGKF9v/JJ58k8x122KFC+4eaZsUVV6zQ9pMmTUrmo0ePTuZbbbVVhY5/8MEHJ/PHHnusQvsHlqwXXnghmdeqlb6WpqioaEmWQ85cKQUAAABA7gylAAAAAMidoRQAAAAAuTOUAgAAACB3hlIAAAAA5M5QCgAAAIDcGUoBAAAAkLvCqi6grDbbbLNkfvLJJyfzP/3pTyVmq6666mLVtKTMmDEjmV977bXJ/O9//3synz59erlrAoDq4uyzz07me+65Z4X2f9111yXz8ePHV2j/UNN8+OGHFdp+9913T+YFBQXJ/KeffkrmN9xwQzJ/+umnkzlQvbz33nvJ/NNPP03mq6++ejJfY401kvmkSZOSOZXLlVIAAAAA5M5QCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkrrOoCymqXXXapUF4RH3zwQTJ//PHHk/ns2bOT+RVXXJHMJ0+enMwBoCZbf/31k3mTJk0qtP9bbrklmY8ZM6ZC+4elzR133JHM69Spk8zPPvvsZP7GG28k8xEjRiTzq666KpkDS5e///3vyfy2225L5hdeeGEyP+aYY5J5afMAKsaVUgAAAADkzlAKAAAAgNwZSgEAAACQO0MpAAAAAHJnKAUAAABA7gylAAAAAMidoRQAAAAAuSvIsiwr04oFBZVdC7CAMrbnIulZyJ+eXTyXXHJJMj/xxBOT+fjx45N53759k/nHH3+czFl66VmoWfTssqlJkybJ/P7770/mvXr1SuYPP/xwMj/44IOT+fTp05P5sqwsPetKKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BVkWZaVacWCgsquBVhAGdtzkfQs5E/PLp5tt902mT/11FPJfLfddkvmw4cPL3dNLBv0LNQsepZFadKkSTK/8MILk/mRRx6ZzDt16pTMP/jgg2S+LCtLz7pSCgAAAIDcGUoBAAAAkDtDKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgdwVZlmVlWrGgoLJrARZQxvZcJD0L+dOzULPoWahZ9CzULGXpWVdKAQAAAJA7QykAAAAAcmcoBQAAAEDuDKUAAAAAyJ2hFAAAAAC5M5QCAAAAIHeGUgAAAADkriDLsqyqiwAAAABg2eJKKQAAAAByZygFAAAAQO4MpQAAAADInaEUAAAAALkzlAIAAAAgd4ZSAAAAAOTOUAoAAACA3BlKAQAAAJA7QykAAAAAcvf/ATnIyMufOSZLAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 샘플 이미지들 시각화\n",
        "fig, axes = plt.subplots(2, 5, figsize=(12, 6))\n",
        "axes = axes.flatten()\n",
        "\n",
        "for i in range(10):\n",
        "    # 각 숫자(0-9)에 대해 첫 번째 샘플 찾기\n",
        "    for j, label in enumerate(mnist['train']['label']):\n",
        "        if label == i:\n",
        "            image = mnist['train'][j]['image']\n",
        "            axes[i].imshow(image, cmap='gray')\n",
        "            axes[i].set_title(f'Digit {i}')\n",
        "            axes[i].axis('off')\n",
        "            break\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.suptitle('MNIST Dataset Samples (First image of each digit)', y=1.02)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "vgb7ayrtxc",
      "metadata": {
        "id": "vgb7ayrtxc"
      },
      "source": [
        "### 3.4 데이터 정규화 (Normalization)\n",
        "\n",
        "신경망의 학습을 안정화하기 위해 픽셀 값을 정규화합니다:\n",
        "1. 픽셀 값을 0-1 범위로 변환 (ToTensor())\n",
        "2. 평균과 표준편차를 이용해 정규화 (Normalize())\n",
        "\n",
        "정규화 공식: `(픽셀값 - 평균) / 표준편차`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "f34pdhxwn5c",
      "metadata": {
        "id": "f34pdhxwn5c",
        "outputId": "cab9195b-e6ec-4881-ad0f-347aeafe06c2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "데이터셋의 통계 정보를 계산 중...\n",
            "평균(mean): 0.1282\n",
            "표준편차(std): 0.3051\n",
            "\n",
            "변환 파이프라인:\n",
            "1. ToTensor(): PIL Image -> PyTorch Tensor (0-255 -> 0-1)\n",
            "2. Normalize(): (픽셀값 - 0.1282) / 0.3051\n",
            "\n",
            "변환 예시:\n",
            "원본 픽셀 범위: 0-255\n",
            "ToTensor 후: 0-1\n",
            "정규화 후 범위: 약 -0.42 ~ 2.86\n"
          ]
        }
      ],
      "source": [
        "# 데이터셋의 평균과 표준편차 계산 (1000개 샘플로 추정)\n",
        "print(\"데이터셋의 통계 정보를 계산 중...\")\n",
        "sample_data = torch.stack([\n",
        "    transforms.ToTensor()(mnist['train'][i]['image'])\n",
        "    for i in range(1000)\n",
        "])\n",
        "\n",
        "mean = sample_data.mean().item()\n",
        "std = sample_data.std().item()\n",
        "print(f\"평균(mean): {mean:.4f}\")\n",
        "print(f\"표준편차(std): {std:.4f}\")\n",
        "\n",
        "# Transform 정의\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor(),           # PIL Image -> Tensor, 0-255 -> 0-1\n",
        "    transforms.Normalize((mean,), (std,))  # 정규화\n",
        "])\n",
        "\n",
        "print(\"\\n변환 파이프라인:\")\n",
        "print(\"1. ToTensor(): PIL Image -> PyTorch Tensor (0-255 -> 0-1)\")\n",
        "print(f\"2. Normalize(): (픽셀값 - {mean:.4f}) / {std:.4f}\")\n",
        "\n",
        "# 변환 전후 비교\n",
        "original_pixel = mnist['train'][0]['image']\n",
        "transformed = transform(original_pixel)\n",
        "print(f\"\\n변환 예시:\")\n",
        "print(f\"원본 픽셀 범위: 0-255\")\n",
        "print(f\"ToTensor 후: 0-1\")\n",
        "print(f\"정규화 후 범위: 약 {transformed.min():.2f} ~ {transformed.max():.2f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "h3ec7al6cl",
      "metadata": {
        "id": "h3ec7al6cl"
      },
      "source": [
        "### 3.5 DataLoader 생성\n",
        "\n",
        "DataLoader는 데이터를 배치 단위로 불러오고, 셔플링 등의 기능을 제공합니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "6wfdp8efmyf",
      "metadata": {
        "id": "6wfdp8efmyf",
        "outputId": "be4a76e9-afc5-4f0d-e8a0-b312bbf2dc70",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "데이터셋 변환 중...\n",
            "훈련 DataLoader: 469개 배치\n",
            "테스트 DataLoader: 10개 배치\n",
            "배치당 훈련 샘플: 128개\n",
            "배치당 테스트 샘플: 1000개\n",
            "\n",
            "첫 번째 배치 shape:\n",
            "이미지: torch.Size([128, 784])  # (batch_size, 784)\n",
            "라벨: torch.Size([128])    # (batch_size,)\n"
          ]
        }
      ],
      "source": [
        "# 데이터 변환 함수 정의\n",
        "def transform_dataset(dataset):\n",
        "    \"\"\"데이터셋에 변환을 적용하는 함수\"\"\"\n",
        "    def transform_fn(batch):\n",
        "        # 이미지를 텐서로 변환하고 28x28을 784로 평탄화\n",
        "        images = [transform(img).view(-1) for img in batch[\"image\"]]\n",
        "        return {\n",
        "            \"image\": torch.stack(images),\n",
        "            \"label\": torch.tensor(batch[\"label\"])\n",
        "        }\n",
        "    return dataset.with_transform(transform_fn)\n",
        "\n",
        "# 훈련/테스트 데이터셋에 변환 적용\n",
        "print(\"데이터셋 변환 중...\")\n",
        "train_dataset = transform_dataset(mnist[\"train\"])\n",
        "test_dataset = transform_dataset(mnist[\"test\"])\n",
        "\n",
        "# DataLoader 생성\n",
        "train_loader = DataLoader(\n",
        "    train_dataset,\n",
        "    batch_size=batch_size,\n",
        "    shuffle=True  # 훈련 데이터는 섞기\n",
        ")\n",
        "test_loader = DataLoader(\n",
        "    test_dataset,\n",
        "    batch_size=test_batch_size,\n",
        "    shuffle=False  # 테스트 데이터는 순서 유지\n",
        ")\n",
        "\n",
        "print(f\"훈련 DataLoader: {len(train_loader)}개 배치\")\n",
        "print(f\"테스트 DataLoader: {len(test_loader)}개 배치\")\n",
        "print(f\"배치당 훈련 샘플: {batch_size}개\")\n",
        "print(f\"배치당 테스트 샘플: {test_batch_size}개\")\n",
        "\n",
        "# 첫 번째 배치 확인\n",
        "sample_batch = next(iter(train_loader))\n",
        "print(f\"\\n첫 번째 배치 shape:\")\n",
        "print(f\"이미지: {sample_batch['image'].shape}  # (batch_size, 784)\")\n",
        "print(f\"라벨: {sample_batch['label'].shape}    # (batch_size,)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6gulko7i5ql",
      "metadata": {
        "id": "6gulko7i5ql"
      },
      "source": [
        "## 4. 모델 훈련\n",
        "\n",
        "### 4.1 모델, 손실함수, 최적화기 설정"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "65a41rghsht",
      "metadata": {
        "id": "65a41rghsht",
        "outputId": "8b8620dd-8f4d-4ecf-baf9-9ff139808352",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== 훈련 설정 ===\n",
            "모델: MLP\n",
            "손실함수: CrossEntropyLoss\n",
            "최적화기: Adam\n",
            "디바이스: cpu\n",
            "모델 파라미터 수: 397,510개\n",
            "\n",
            "=== 훈련 정보 ===\n",
            "전체 에포크: 10\n",
            "배치 크기: 128\n",
            "학습률: 0.001\n",
            "에포크당 배치 수: 469\n",
            "에포크당 훈련 샘플 수: 60,032\n",
            "전체 훈련 스텝: 4,690\n"
          ]
        }
      ],
      "source": [
        "# 모델 초기화 (이전에 생성한 model 재사용하지 않고 새로 생성)\n",
        "model = MLP().to(device)  # 모델을 GPU로 이동 (있다면)\n",
        "\n",
        "# 손실함수: 다중 클래스 분류를 위한 CrossEntropyLoss\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "\n",
        "# 최적화기: Adam (적응적 학습률 알고리즘)\n",
        "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
        "\n",
        "print(\"=== 훈련 설정 ===\")\n",
        "print(f\"모델: {model.__class__.__name__}\")\n",
        "print(f\"손실함수: {criterion.__class__.__name__}\")\n",
        "print(f\"최적화기: {optimizer.__class__.__name__}\")\n",
        "print(f\"디바이스: {device}\")\n",
        "print(f\"모델 파라미터 수: {sum(p.numel() for p in model.parameters()):,}개\")\n",
        "\n",
        "# 훈련 설정 요약\n",
        "print(f\"\\n=== 훈련 정보 ===\")\n",
        "print(f\"전체 에포크: {nb_epochs}\")\n",
        "print(f\"배치 크기: {batch_size}\")\n",
        "print(f\"학습률: {learning_rate}\")\n",
        "print(f\"에포크당 배치 수: {len(train_loader)}\")\n",
        "print(f\"에포크당 훈련 샘플 수: {len(train_loader) * batch_size:,}\")\n",
        "print(f\"전체 훈련 스텝: {nb_epochs * len(train_loader):,}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "k9waf7yaxd",
      "metadata": {
        "id": "k9waf7yaxd"
      },
      "source": [
        "### 4.2 훈련 루프 실행\n",
        "\n",
        "신경망 훈련의 기본 단계:\n",
        "1. **Forward Pass**: 입력 데이터를 모델에 통과시켜 예측값 계산\n",
        "2. **Loss 계산**: 예측값과 실제값의 차이(오차) 계산\n",
        "3. **Backward Pass**: 역전파를 통해 각 파라미터의 그래디언트 계산\n",
        "4. **Parameter Update**: 최적화기를 사용해 파라미터 업데이트"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "3sp9z37zxiw",
      "metadata": {
        "id": "3sp9z37zxiw",
        "outputId": "cd5dfbd3-fc86-412d-cc81-56ce58e7922f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== 훈련 시작 ===\n",
            "\n",
            "Epoch [1/10], Batch [100/469]\n",
            "  Loss: 0.4643, Train Acc: 86.07%\n",
            "Epoch [1/10], Batch [200/469]\n",
            "  Loss: 0.3460, Train Acc: 89.71%\n",
            "Epoch [1/10], Batch [300/469]\n",
            "  Loss: 0.2879, Train Acc: 91.41%\n",
            "Epoch [1/10], Batch [400/469]\n",
            "  Loss: 0.2528, Train Acc: 92.44%\n",
            "\n",
            "Epoch [1/10] 훈련 완료:\n",
            "  평균 Loss: 0.2356\n",
            "  훈련 정확도: 92.99%\n",
            "  테스트 정확도: 96.28%\n",
            "------------------------------------------------------------\n",
            "Epoch [2/10], Batch [100/469]\n",
            "  Loss: 0.1020, Train Acc: 97.00%\n",
            "Epoch [2/10], Batch [200/469]\n",
            "  Loss: 0.1016, Train Acc: 96.98%\n",
            "Epoch [2/10], Batch [300/469]\n",
            "  Loss: 0.0960, Train Acc: 97.12%\n",
            "Epoch [2/10], Batch [400/469]\n",
            "  Loss: 0.0930, Train Acc: 97.20%\n",
            "\n",
            "Epoch [2/10] 훈련 완료:\n",
            "  평균 Loss: 0.0914\n",
            "  훈련 정확도: 97.23%\n",
            "  테스트 정확도: 97.40%\n",
            "------------------------------------------------------------\n",
            "Epoch [3/10], Batch [100/469]\n",
            "  Loss: 0.0539, Train Acc: 98.40%\n",
            "Epoch [3/10], Batch [200/469]\n",
            "  Loss: 0.0563, Train Acc: 98.29%\n",
            "Epoch [3/10], Batch [300/469]\n",
            "  Loss: 0.0573, Train Acc: 98.27%\n",
            "Epoch [3/10], Batch [400/469]\n",
            "  Loss: 0.0586, Train Acc: 98.21%\n",
            "\n",
            "Epoch [3/10] 훈련 완료:\n",
            "  평균 Loss: 0.0575\n",
            "  훈련 정확도: 98.24%\n",
            "  테스트 정확도: 97.57%\n",
            "------------------------------------------------------------\n",
            "Epoch [4/10], Batch [100/469]\n",
            "  Loss: 0.0375, Train Acc: 98.87%\n",
            "Epoch [4/10], Batch [200/469]\n",
            "  Loss: 0.0395, Train Acc: 98.81%\n",
            "Epoch [4/10], Batch [300/469]\n",
            "  Loss: 0.0424, Train Acc: 98.73%\n",
            "Epoch [4/10], Batch [400/469]\n",
            "  Loss: 0.0421, Train Acc: 98.71%\n",
            "\n",
            "Epoch [4/10] 훈련 완료:\n",
            "  평균 Loss: 0.0414\n",
            "  훈련 정확도: 98.73%\n",
            "  테스트 정확도: 97.70%\n",
            "------------------------------------------------------------\n",
            "Epoch [5/10], Batch [100/469]\n",
            "  Loss: 0.0294, Train Acc: 99.15%\n",
            "Epoch [5/10], Batch [200/469]\n",
            "  Loss: 0.0275, Train Acc: 99.14%\n",
            "Epoch [5/10], Batch [300/469]\n",
            "  Loss: 0.0292, Train Acc: 99.11%\n",
            "Epoch [5/10], Batch [400/469]\n",
            "  Loss: 0.0293, Train Acc: 99.12%\n",
            "\n",
            "Epoch [5/10] 훈련 완료:\n",
            "  평균 Loss: 0.0297\n",
            "  훈련 정확도: 99.11%\n",
            "  테스트 정확도: 97.88%\n",
            "------------------------------------------------------------\n",
            "Epoch [6/10], Batch [100/469]\n",
            "  Loss: 0.0202, Train Acc: 99.42%\n",
            "Epoch [6/10], Batch [200/469]\n",
            "  Loss: 0.0201, Train Acc: 99.41%\n",
            "Epoch [6/10], Batch [300/469]\n",
            "  Loss: 0.0236, Train Acc: 99.28%\n",
            "Epoch [6/10], Batch [400/469]\n",
            "  Loss: 0.0233, Train Acc: 99.29%\n",
            "\n",
            "Epoch [6/10] 훈련 완료:\n",
            "  평균 Loss: 0.0252\n",
            "  훈련 정확도: 99.23%\n",
            "  테스트 정확도: 97.84%\n",
            "------------------------------------------------------------\n",
            "Epoch [7/10], Batch [100/469]\n",
            "  Loss: 0.0200, Train Acc: 99.30%\n",
            "Epoch [7/10], Batch [200/469]\n",
            "  Loss: 0.0174, Train Acc: 99.40%\n",
            "Epoch [7/10], Batch [300/469]\n",
            "  Loss: 0.0177, Train Acc: 99.38%\n",
            "Epoch [7/10], Batch [400/469]\n",
            "  Loss: 0.0200, Train Acc: 99.30%\n",
            "\n",
            "Epoch [7/10] 훈련 완료:\n",
            "  평균 Loss: 0.0209\n",
            "  훈련 정확도: 99.28%\n",
            "  테스트 정확도: 97.83%\n",
            "------------------------------------------------------------\n",
            "Epoch [8/10], Batch [100/469]\n",
            "  Loss: 0.0154, Train Acc: 99.48%\n",
            "Epoch [8/10], Batch [200/469]\n",
            "  Loss: 0.0148, Train Acc: 99.51%\n",
            "Epoch [8/10], Batch [300/469]\n",
            "  Loss: 0.0150, Train Acc: 99.52%\n",
            "Epoch [8/10], Batch [400/469]\n",
            "  Loss: 0.0156, Train Acc: 99.49%\n",
            "\n",
            "Epoch [8/10] 훈련 완료:\n",
            "  평균 Loss: 0.0158\n",
            "  훈련 정확도: 99.48%\n",
            "  테스트 정확도: 98.09%\n",
            "------------------------------------------------------------\n",
            "Epoch [9/10], Batch [100/469]\n",
            "  Loss: 0.0116, Train Acc: 99.56%\n",
            "Epoch [9/10], Batch [200/469]\n",
            "  Loss: 0.0113, Train Acc: 99.61%\n",
            "Epoch [9/10], Batch [300/469]\n",
            "  Loss: 0.0124, Train Acc: 99.56%\n",
            "Epoch [9/10], Batch [400/469]\n",
            "  Loss: 0.0138, Train Acc: 99.54%\n",
            "\n",
            "Epoch [9/10] 훈련 완료:\n",
            "  평균 Loss: 0.0146\n",
            "  훈련 정확도: 99.51%\n",
            "  테스트 정확도: 97.71%\n",
            "------------------------------------------------------------\n",
            "Epoch [10/10], Batch [100/469]\n",
            "  Loss: 0.0102, Train Acc: 99.71%\n",
            "Epoch [10/10], Batch [200/469]\n",
            "  Loss: 0.0111, Train Acc: 99.65%\n",
            "Epoch [10/10], Batch [300/469]\n",
            "  Loss: 0.0114, Train Acc: 99.63%\n",
            "Epoch [10/10], Batch [400/469]\n",
            "  Loss: 0.0112, Train Acc: 99.64%\n",
            "\n",
            "Epoch [10/10] 훈련 완료:\n",
            "  평균 Loss: 0.0114\n",
            "  훈련 정확도: 99.63%\n",
            "  테스트 정확도: 97.73%\n",
            "------------------------------------------------------------\n",
            "\n",
            "=== 훈련 완료 ===\n",
            "최종 훈련 정확도: 99.63%\n",
            "최종 테스트 정확도: 97.73%\n"
          ]
        }
      ],
      "source": [
        "# 훈련 과정 추적을 위한 리스트\n",
        "train_losses = []\n",
        "train_accuracies = []\n",
        "test_accuracies = []\n",
        "\n",
        "print(\"=== 훈련 시작 ===\\n\")\n",
        "\n",
        "for epoch in range(nb_epochs):\n",
        "    # 훈련 모드로 설정\n",
        "    model.train()\n",
        "\n",
        "    running_loss = 0.0\n",
        "    correct_train = 0\n",
        "    total_train = 0\n",
        "\n",
        "    for batch_idx, batch in enumerate(train_loader):\n",
        "        # 데이터를 디바이스로 이동\n",
        "        imgs = batch[\"image\"].to(device)\n",
        "        labels = batch[\"label\"].to(device)\n",
        "\n",
        "        # 그래디언트 초기화\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Forward pass\n",
        "        outputs = model(imgs)\n",
        "        loss = criterion(outputs, labels)\n",
        "\n",
        "        # Backward pass\n",
        "        loss.backward()\n",
        "\n",
        "        # 파라미터 업데이트\n",
        "        optimizer.step()\n",
        "\n",
        "        # 통계 업데이트\n",
        "        running_loss += loss.item()\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total_train += labels.size(0)\n",
        "        correct_train += (predicted == labels).sum().item()\n",
        "\n",
        "        # 100 배치마다 중간 결과 출력\n",
        "        if (batch_idx + 1) % 100 == 0:\n",
        "            current_loss = running_loss / (batch_idx + 1)\n",
        "            current_acc = 100 * correct_train / total_train\n",
        "            print(f\"Epoch [{epoch+1}/{nb_epochs}], Batch [{batch_idx+1}/{len(train_loader)}]\")\n",
        "            print(f\"  Loss: {current_loss:.4f}, Train Acc: {current_acc:.2f}%\")\n",
        "\n",
        "    # 에포크 종료 후 훈련 통계\n",
        "    epoch_loss = running_loss / len(train_loader)\n",
        "    epoch_train_acc = 100 * correct_train / total_train\n",
        "    train_losses.append(epoch_loss)\n",
        "    train_accuracies.append(epoch_train_acc)\n",
        "\n",
        "    print(f\"\\nEpoch [{epoch+1}/{nb_epochs}] 훈련 완료:\")\n",
        "    print(f\"  평균 Loss: {epoch_loss:.4f}\")\n",
        "    print(f\"  훈련 정확도: {epoch_train_acc:.2f}%\")\n",
        "\n",
        "    # 테스트 정확도 계산\n",
        "    model.eval()  # 평가 모드로 설정\n",
        "    correct_test = 0\n",
        "    total_test = 0\n",
        "\n",
        "    with torch.no_grad():  # 그래디언트 계산 비활성화\n",
        "        for batch in test_loader:\n",
        "            imgs = batch[\"image\"].to(device)\n",
        "            labels = batch[\"label\"].to(device)\n",
        "\n",
        "            outputs = model(imgs)\n",
        "            _, predicted = torch.max(outputs, 1)\n",
        "            total_test += labels.size(0)\n",
        "            correct_test += (predicted == labels).sum().item()\n",
        "\n",
        "    test_acc = 100 * correct_test / total_test\n",
        "    test_accuracies.append(test_acc)\n",
        "    print(f\"  테스트 정확도: {test_acc:.2f}%\")\n",
        "    print(\"-\" * 60)\n",
        "\n",
        "print(f\"\\n=== 훈련 완료 ===\")\n",
        "print(f\"최종 훈련 정확도: {train_accuracies[-1]:.2f}%\")\n",
        "print(f\"최종 테스트 정확도: {test_accuracies[-1]:.2f}%\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "pqku2b8psyn",
      "metadata": {
        "id": "pqku2b8psyn"
      },
      "source": [
        "## 5. 결과 분석 및 시각화\n",
        "\n",
        "### 5.1 훈련 과정 시각화\n",
        "\n",
        "Loss와 정확도의 변화를 그래프로 확인해보겠습니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "icbqk30iqt",
      "metadata": {
        "id": "icbqk30iqt",
        "outputId": "af0eb8c6-a85f-4257-94c4-bc0fde4742e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== 최종 결과 요약 ===\n",
            "최종 훈련 Loss: 0.0114\n",
            "최종 훈련 정확도: 99.63%\n",
            "최종 테스트 정확도: 97.73%\n",
            "과적합 정도: 1.90% (훈련-테스트 정확도 차이)\n"
          ]
        }
      ],
      "source": [
        "# 훈련 과정 시각화\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
        "\n",
        "# Loss 그래프\n",
        "epochs_range = range(1, nb_epochs + 1)\n",
        "ax1.plot(epochs_range, train_losses, 'b-', marker='o', linewidth=2, markersize=8)\n",
        "ax1.set_title('Training Loss', fontsize=14, fontweight='bold')\n",
        "ax1.set_xlabel('Epoch', fontsize=12)\n",
        "ax1.set_ylabel('Loss', fontsize=12)\n",
        "ax1.grid(True, alpha=0.3)\n",
        "ax1.set_xticks(epochs_range)\n",
        "\n",
        "# 정확도 그래프\n",
        "ax2.plot(epochs_range, train_accuracies, 'g-', marker='s', linewidth=2,\n",
        "         markersize=8, label='Train Accuracy')\n",
        "ax2.plot(epochs_range, test_accuracies, 'r-', marker='^', linewidth=2,\n",
        "         markersize=8, label='Test Accuracy')\n",
        "ax2.set_title('Accuracy Comparison', fontsize=14, fontweight='bold')\n",
        "ax2.set_xlabel('Epoch', fontsize=12)\n",
        "ax2.set_ylabel('Accuracy (%)', fontsize=12)\n",
        "ax2.grid(True, alpha=0.3)\n",
        "ax2.legend(fontsize=11)\n",
        "ax2.set_xticks(epochs_range)\n",
        "ax2.set_ylim(80, 100)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# 최종 결과 요약\n",
        "print(\"=== 최종 결과 요약 ===\")\n",
        "print(f\"최종 훈련 Loss: {train_losses[-1]:.4f}\")\n",
        "print(f\"최종 훈련 정확도: {train_accuracies[-1]:.2f}%\")\n",
        "print(f\"최종 테스트 정확도: {test_accuracies[-1]:.2f}%\")\n",
        "print(f\"과적합 정도: {train_accuracies[-1] - test_accuracies[-1]:.2f}% (훈련-테스트 정확도 차이)\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7u31xib5xoj",
      "metadata": {
        "id": "7u31xib5xoj"
      },
      "source": [
        "### 5.2 예측 결과 시각화\n",
        "\n",
        "모델이 실제로 어떻게 예측하는지 샘플 이미지들을 확인해보겠습니다. 올바른 예측과 틀린 예측을 모두 살펴보겠습니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "iujp87752wh",
      "metadata": {
        "id": "iujp87752wh",
        "outputId": "7ab857a8-97a3-4b69-8342-0c8f79811151",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "올바른 예측: 7개\n",
            "틀린 예측: 3개\n"
          ]
        }
      ],
      "source": [
        "# 예측 샘플 수집\n",
        "model.eval()\n",
        "correct_samples = []\n",
        "wrong_samples = []\n",
        "\n",
        "with torch.no_grad():\n",
        "    for batch in test_loader:\n",
        "        imgs = batch[\"image\"].to(device)\n",
        "        labels = batch[\"label\"].to(device)\n",
        "        outputs = model(imgs)\n",
        "        _, predicted = torch.max(outputs, 1)\n",
        "\n",
        "        # 정확한 예측과 틀린 예측 분리\n",
        "        for i in range(len(imgs)):\n",
        "            if len(correct_samples) >= 7 and len(wrong_samples) >= 3:\n",
        "                break\n",
        "\n",
        "            sample = (imgs[i], labels[i], predicted[i], outputs[i])\n",
        "            if labels[i] == predicted[i] and len(correct_samples) < 7:\n",
        "                correct_samples.append(sample)\n",
        "            elif labels[i] != predicted[i] and len(wrong_samples) < 3:\n",
        "                wrong_samples.append(sample)\n",
        "\n",
        "        if len(correct_samples) >= 7 and len(wrong_samples) >= 3:\n",
        "            break\n",
        "\n",
        "# 시각화: 7개 맞춘 것 + 3개 틀린 것\n",
        "display_samples = correct_samples + wrong_samples\n",
        "\n",
        "fig, axes = plt.subplots(2, 5, figsize=(15, 6))\n",
        "axes = axes.flatten()\n",
        "\n",
        "for i, (img, true_label, pred_label, output) in enumerate(display_samples):\n",
        "    # 28x28로 reshape (정규화된 상태)\n",
        "    img_display = img.cpu().view(28, 28)\n",
        "\n",
        "    # 정규화를 역변환 (시각화를 위해)\n",
        "    img_display = img_display * std + mean\n",
        "    img_display = torch.clamp(img_display, 0, 1)\n",
        "\n",
        "    axes[i].imshow(img_display, cmap='gray')\n",
        "\n",
        "    # 색상 설정: 맞으면 초록, 틀리면 빨강\n",
        "    color = 'green' if true_label == pred_label else 'red'\n",
        "    axes[i].set_title(f'True: {true_label.item()}, Pred: {pred_label.item()}', color=color, fontweight='bold')\n",
        "    axes[i].axis('off')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.suptitle('Prediction Results (Green: Correct, Red: Wrong)', y=1.02, fontsize=16, fontweight='bold')\n",
        "plt.show()\n",
        "\n",
        "print(f\"올바른 예측: {len([s for s in display_samples if s[1] == s[2]])}개\")\n",
        "print(f\"틀린 예측: {len([s for s in display_samples if s[1] != s[2]])}개\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bzow5k6y57j",
      "metadata": {
        "id": "bzow5k6y57j"
      },
      "source": [
        "### 5.3 모델의 확신도 분석\n",
        "\n",
        "틀리게 예측한 경우, 모델이 각 클래스에 대해 얼마나 확신했는지 확인해보겠습니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "7jz1pmdl16x",
      "metadata": {
        "id": "7jz1pmdl16x",
        "outputId": "fa6ef8d5-1df7-42e0-8300-100d36a8d228",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\\n=== 모델의 상위 3개 예측 ===\n",
            "1위: 숫자 4 (확률: 74.63%)\n",
            "2위: 숫자 9 (확률: 25.17%)\n",
            "3위: 숫자 8 (확률: 0.14%)\n",
            "\\n실제 라벨 9의 확률: 25.17%\n"
          ]
        }
      ],
      "source": [
        "# 틀린 예측에 대한 상세 분석\n",
        "if wrong_samples:\n",
        "    wrong_img, wrong_true, wrong_pred, wrong_output = wrong_samples[0]\n",
        "\n",
        "    # 소프트맥스를 통해 확률로 변환\n",
        "    probabilities = torch.softmax(wrong_output, dim=0).cpu()\n",
        "\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n",
        "\n",
        "    # 왼쪽: 틀린 예측 이미지\n",
        "    img_display = wrong_img.cpu().view(28, 28) * std + mean\n",
        "    img_display = torch.clamp(img_display, 0, 1)\n",
        "    ax1.imshow(img_display, cmap='gray')\n",
        "    ax1.set_title(f'Wrong Prediction Case\\\\nTrue: {wrong_true.item()}, Pred: {wrong_pred.item()}',\n",
        "                  color='red', fontsize=12, fontweight='bold')\n",
        "    ax1.axis('off')\n",
        "\n",
        "    # 오른쪽: 확률 분포\n",
        "    bars = ax2.bar(range(10), probabilities, alpha=0.7, color='lightblue', edgecolor='black')\n",
        "\n",
        "    # 실제 라벨과 예측 라벨 강조\n",
        "    bars[wrong_true.item()].set_color('green')\n",
        "    bars[wrong_pred.item()].set_color('red')\n",
        "\n",
        "    ax2.set_xlabel('Digit Class', fontsize=11)\n",
        "    ax2.set_ylabel('Probability', fontsize=11)\n",
        "    ax2.set_title('Model Confidence by Class', fontsize=12, fontweight='bold')\n",
        "    ax2.set_xticks(range(10))\n",
        "    ax2.grid(axis='y', alpha=0.3)\n",
        "\n",
        "    # 범례 추가\n",
        "    from matplotlib.lines import Line2D\n",
        "    legend_elements = [Line2D([0], [0], color='green', lw=4, label=f'True Label ({wrong_true.item()})'),\n",
        "                       Line2D([0], [0], color='red', lw=4, label=f'Predicted ({wrong_pred.item()})')]\n",
        "    ax2.legend(handles=legend_elements, loc='upper right')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # 상위 3개 확률 출력\n",
        "    top3_probs, top3_indices = torch.topk(probabilities, 3)\n",
        "    print(\"\\\\n=== 모델의 상위 3개 예측 ===\")\n",
        "    for i, (prob, idx) in enumerate(zip(top3_probs, top3_indices)):\n",
        "        print(f\"{i+1}위: 숫자 {idx.item()} (확률: {prob.item()*100:.2f}%)\")\n",
        "\n",
        "    print(f\"\\\\n실제 라벨 {wrong_true.item()}의 확률: {probabilities[wrong_true.item()]*100:.2f}%\")\n",
        "\n",
        "else:\n",
        "    print(\"틀린 예측 샘플이 없습니다. 모델이 모든 테스트 샘플을 정확히 예측했습니다!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2fiwvxodjr8",
      "metadata": {
        "id": "2fiwvxodjr8"
      },
      "source": [
        "## 6. 과제 및 실험\n",
        "\n",
        "### 💡 학습을 위한 실험 제안\n",
        "\n",
        "이제 기본 모델을 이해했으니, 다음과 같은 실험들을 해보세요:\n",
        "\n",
        "#### 🔧 **Try 1: 하이퍼파라미터 튜닝**\n",
        "- 학습률을 바꿔보세요 (`learning_rate = 1e-2`, `1e-4` 등)\n",
        "- 은닉층 크기를 조정해보세요 (`hidden_size = 50`, `200` 등)\n",
        "- 에포크 수를 늘려보세요 (`nb_epochs = 5` 또는 `10`)\n",
        "\n",
        "#### 🏗️ **Try 2: 모델 구조 개선**\n",
        "- 은닉층을 더 추가해보세요 (3층, 4층 신경망)\n",
        "- 다른 활성화 함수를 시도해보세요 (`nn.Tanh()`, `nn.Sigmoid()`)\n",
        "- Dropout을 추가해서 과적합을 방지해보세요\n",
        "\n",
        "#### 📈 **Try 3: 성능 분석**\n",
        "- Confusion Matrix 그리기\n",
        "- 클래스별 정확도 분석\n",
        "- 잘못 분류된 이미지들의 패턴 찾기\n",
        "\n",
        "### 📝 **실험 결과 기록하기**\n",
        "각 실험 후 다음을 기록해보세요:\n",
        "- 최종 테스트 정확도\n",
        "- 훈련 시간\n",
        "- 관찰된 패턴이나 인사이트"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "9s4s7lwm7ea",
      "metadata": {
        "id": "9s4s7lwm7ea",
        "outputId": "949e1e02-6928-4321-e311-adc56e6e1a46",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "실험을 시작해보세요! 💪\n"
          ]
        }
      ],
      "source": [
        "# 실험을 위한 빈 셀\n",
        "# 여기서 위에서 제안한 실험들을 진행해보세요!\n",
        "\n",
        "# 예시: 학습률을 바꿔서 재훈련\n",
        "# learning_rate = 1e-2  # 원래보다 10배 큰 학습률\n",
        "# model = MLP().to(device)\n",
        "# optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
        "#\n",
        "# 위의 훈련 루프를 다시 실행하고 결과를 비교해보세요!\n",
        "\n",
        "print(\"실험을 시작해보세요! 💪\")"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "aae",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.13"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
